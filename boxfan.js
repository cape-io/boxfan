// Generated by CoffeeScript 1.6.3
var DJ, dj, filter, hasFields, matchAll, matchAny, _;

_ = require('lodash');

DJ = require('dot-object');

dj = new DJ();

matchAll = function(values, required) {
  var match,
    _this = this;
  match = true;
  _.forEach(required, function(required_value, key) {
    var value_of_thing_to_check;
    value_of_thing_to_check = dj.pick(key, values);
    if ('*' === required_value) {
      if (_.isEmpty(value_of_thing_to_check)) {
        match = false;
        return false;
      }
    } else if (value_of_thing_to_check !== required_value) {
      match = false;
      return false;
    }
  });
  return match;
};

matchAny = function(values, required) {
  var match,
    _this = this;
  match = false;
  _.forEach(required, function(required_value, key) {
    var value_of_thing_to_check;
    value_of_thing_to_check = dj.pick(key, values);
    if (_.isArray(required_value)) {
      match = _.contains(required_value, value_of_thing_to_check);
    } else {
      match = (value_of_thing_to_check === required_value) || ('*' === required_value && !_.isEmpty(value_of_thing_to_check));
    }
    if (match) {
      return false;
    }
  });
  return match;
};

hasFields = function(values, required) {
  var match;
  if (_.isString(required)) {
    return !_.isUndefined(values[required]);
  }
  match = true;
  if (_.isArray(required)) {
    _.each(required, function(required_field_id) {
      if (_.isUndefined(values[required_field_id])) {
        match = false;
        return false;
      }
    });
    return match;
  } else {
    return false;
  }
};

filter = function(values, filter_info) {
  var filter_types;
  filter_types = [];
  if (!(filter_info.must || filter_info.must_not || filter_info.should)) {
    filter_info = {
      must: filter_info
    };
    filter_types = ['must'];
  } else {
    filter_types = _.keys(filter_info);
  }
  if (_.contains('must', filter_types) && _.isObject(filter_info.must) && !matchAll(values, filter_info.must)) {
    return false;
  }
  if (_.contains('must_not', filter_types) && _.isObject(filter_info.must_not) && matchAny(values, filter_info.must_not)) {
    return false;
  }
  if (_.contains('should', filter_types) && _.isObject(filter_info.should) && !matchAny(values, filter_info.should)) {
    return false;
  }
  return true;
};

module.exports = function(values, filter_info) {
  var _this = this;
  if (_.isArray(values)) {
    return _.filter(values, function(item) {
      return filter(item, filter_info);
    });
  } else {
    return filter(values, filter_info);
  }
};
